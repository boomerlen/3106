
build/bin/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000260  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000334  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .lock         00000001  00830000  00830000  00000337  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000002f  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000f1f  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a71  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000079f  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000026c  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000488  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000249  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	49 c0       	rjmp	.+146    	; 0xaa <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	7c c0       	rjmp	.+248    	; 0x11c <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	05 d1       	rcall	.+522    	; 0x24e <main>
  44:	0b c1       	rjmp	.+534    	; 0x25c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <convert>:
// LB_MODE_1 does not enable any lock bits
LOCKBITS = LB_MODE_1;

void convert(uint16_t adc_val) {
    return;
}
  48:	08 95       	ret

0000004a <ADC_SingleShot>:

#ifdef MODE_SINGLE_SHOT
void ADC_SingleShot() {
    // Main function for the SingleShot mode of operation

    ADC_setup();
  4a:	3e d0       	rcall	.+124    	; 0xc8 <ADC_setup>
    freqgen_setup();
  4c:	71 d0       	rcall	.+226    	; 0x130 <freqgen_setup>
    GPIO_setup();
  4e:	a0 d0       	rcall	.+320    	; 0x190 <GPIO_setup>
    display_setup();
  50:	9c d0       	rcall	.+312    	; 0x18a <display_setup>

    freqgen_set(FREQGEN_N);
  52:	8e e0       	ldi	r24, 0x0E	; 14
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	80 d0       	rcall	.+256    	; 0x158 <freqgen_set>

    while (1) {
        if (GPIO_sample()) {
  58:	9e d0       	rcall	.+316    	; 0x196 <GPIO_sample>
  5a:	88 23       	and	r24, r24
  5c:	e9 f3       	breq	.-6      	; 0x58 <ADC_SingleShot+0xe>
            // Blink isn't so important as to interrupt this
            cli();
  5e:	f8 94       	cli

            // Disable peak holding
            GPIO_pk_clr_on();
  60:	9c d0       	rcall	.+312    	; 0x19a <GPIO_pk_clr_on>

            // Start frequency generator
            freqgen_enable();
  62:	6f d0       	rcall	.+222    	; 0x142 <freqgen_enable>

            // Wait approx 1ms for steady state
            delay_ms(1);
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	7a d0       	rcall	.+244    	; 0x15e <delay_ms>

            // Enable peak holding
            GPIO_pk_clr_off();
  6a:	99 d0       	rcall	.+306    	; 0x19e <GPIO_pk_clr_off>

            // Wait approx 5ms to stabilise
            delay_ms(5);
  6c:	85 e0       	ldi	r24, 0x05	; 5
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	76 d0       	rcall	.+236    	; 0x15e <delay_ms>

            // Turn off freqgen to decrease noise
            freqgen_disable();
  72:	6e d0       	rcall	.+220    	; 0x150 <freqgen_disable>

            // ADC_sample invokes low-noise mode
            // which shuts off system clocks etc

            // Sample ADC
            uint16_t adc_val = ADC_sample();
  74:	30 d0       	rcall	.+96     	; 0xd6 <ADC_sample>

            // Clear peak holder
            GPIO_pk_clr_on();
  76:	91 d0       	rcall	.+290    	; 0x19a <GPIO_pk_clr_on>

            // Do some calculation
            convert(adc_val);

            // Output to display
            display_set_word(5);
  78:	85 e0       	ldi	r24, 0x05	; 5
  7a:	89 d0       	rcall	.+274    	; 0x18e <display_set_word>

            // Blink can keep on going
            sei();
  7c:	78 94       	sei

            // Wait a bit to avoid triggering too many times in one press
            delay_ms(300);
  7e:	8c e2       	ldi	r24, 0x2C	; 44
  80:	91 e0       	ldi	r25, 0x01	; 1
  82:	6d d0       	rcall	.+218    	; 0x15e <delay_ms>
  84:	e9 cf       	rjmp	.-46     	; 0x58 <ADC_SingleShot+0xe>

00000086 <freqgen_test>:

}
#endif

void freqgen_test() {
    freqgen_setup();
  86:	54 d0       	rcall	.+168    	; 0x130 <freqgen_setup>
    
    freqgen_set(FREQGEN_N);
  88:	8e e0       	ldi	r24, 0x0E	; 14
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	65 d0       	rcall	.+202    	; 0x158 <freqgen_set>

    freqgen_enable();
  8e:	59 c0       	rjmp	.+178    	; 0x142 <freqgen_enable>

00000090 <ADC_test>:
}

void ADC_test() {
    // Continusouly sample ADC and compare against some voltage threshold
    ADC_setup();
  90:	1b d0       	rcall	.+54     	; 0xc8 <ADC_setup>

    // Configure pin PA4 as cutoff-led
    DDRA |= _BV(PA4);
  92:	d4 9a       	sbi	0x1a, 4	; 26
  94:	04 c0       	rjmp	.+8      	; 0x9e <ADC_test+0xe>

    while (1) {
        uint16_t adc_val = ADC_sample();

        if (adc_val > cutoff) {
            PORTA |= _BV(PA4);
  96:	dc 9a       	sbi	0x1b, 4	; 27
        } else {
            PORTA &= ~_BV(PA4);
        }

        delay_ms(100);
  98:	84 e6       	ldi	r24, 0x64	; 100
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	60 d0       	rcall	.+192    	; 0x15e <delay_ms>
    // ADC = VIN / VCC * 1024 (ideally, without any errors)

    uint16_t cutoff = 700; // About VCC/3

    while (1) {
        uint16_t adc_val = ADC_sample();
  9e:	1b d0       	rcall	.+54     	; 0xd6 <ADC_sample>

        if (adc_val > cutoff) {
  a0:	8d 3b       	cpi	r24, 0xBD	; 189
  a2:	92 40       	sbci	r25, 0x02	; 2
  a4:	c0 f7       	brcc	.-16     	; 0x96 <ADC_test+0x6>
            PORTA |= _BV(PA4);
        } else {
            PORTA &= ~_BV(PA4);
  a6:	dc 98       	cbi	0x1b, 4	; 27
  a8:	f7 cf       	rjmp	.-18     	; 0x98 <ADC_test+0x8>

000000aa <__vector_11>:

#include <avr/io.h>
#include <avr/sleep.h>
#include <avr/interrupt.h>

ISR(ADC_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
    // Turn off sleep mode
    sleep_disable();
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	85 bf       	out	0x35, r24	; 53
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <ADC_setup>:

void ADC_setup() {
    // Enable ADC interrupt
    ADCSRA |= _BV(ADIE);
  c8:	33 9a       	sbi	0x06, 3	; 6

    // Reference set to VCC
    // Set ADC input
    ADMUX |= 0x00; // Single-ended ADC0 (PA0)
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	87 b9       	out	0x07, r24	; 7

    // Set clock prescaling
    // See datasheet section 15.5 (pg 144)
    // Want between 50-200kHz from 1MHz.
    // Division by 8 will achieve this.
    ADCSRA |= _BV(ADPS1) | _BV(ADPS0);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	86 b9       	out	0x06, r24	; 6
}
  d4:	08 95       	ret

000000d6 <ADC_sample>:

uint16_t ADC_sample() {
    // Enable ADC
    ADCSRA |= _BV(ADEN);
  d6:	37 9a       	sbi	0x06, 7	; 6

    // Prepare for sleep
    sleep_enable();
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	85 bf       	out	0x35, r24	; 53
    MCUCR |= _BV(SM0); // ADC noise reduction mode
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	85 bf       	out	0x35, r24	; 53
    sei();
  e4:	78 94       	sei

    // Start conversion
    ADCSRA |= _BV(ADSC);
  e6:	36 9a       	sbi	0x06, 6	; 6

    // Enable sleep mode (will be woken by ADC interrupt)
    sleep_mode();
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	85 bf       	out	0x35, r24	; 53
  ee:	88 95       	sleep
  f0:	85 b7       	in	r24, 0x35	; 53
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	85 bf       	out	0x35, r24	; 53

    // Wait for SE to be clear
    // Should happen immediately if all the sleep + wake stuff has worked
    while (1) {
        uint8_t se = (MCUCR & _BV(SE));
        if (se == _BV(SE)) {
  f6:	05 b6       	in	r0, 0x35	; 53
  f8:	05 fe       	sbrs	r0, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <ADC_sample+0x20>
        }
    }

    // Extract data
    // ADCL must be read first.
    uint8_t adc_lower = ADCL;
  fc:	24 b1       	in	r18, 0x04	; 4
    uint8_t adc_upper = ADCH;
  fe:	95 b1       	in	r25, 0x05	; 5

    // Data is right justified
    uint16_t adc_result = (adc_upper << 6) + adc_lower;
 100:	89 2f       	mov	r24, r25
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	00 24       	eor	r0, r0
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	07 94       	ror	r0
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	07 94       	ror	r0
 112:	98 2f       	mov	r25, r24
 114:	80 2d       	mov	r24, r0
    return adc_result;
}
 116:	82 0f       	add	r24, r18
 118:	91 1d       	adc	r25, r1
 11a:	08 95       	ret

0000011c <__vector_17>:

// Decisions:
// 1. Output is going into OC1D
// 2. Want to use Normal Mode and "toggle Compare Output Mode"

ISR(TIMER1_COMPD_vect) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1

}
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <freqgen_setup>:
void freqgen_setup() {
    // Clear prescaler
    //TCCR1B |= _BV(PSR1);

    // Set OCW1D to toggle on compare match mode
    TCCR1C |= _BV(COM1D0);
 130:	87 b5       	in	r24, 0x27	; 39
 132:	84 60       	ori	r24, 0x04	; 4
 134:	87 bd       	out	0x27, r24	; 39

    // Ensure PLL is off 
    // (Using 1MHz system clock as source)
    //PLLCSR |= _BV(PCKE) | _BV(PLLE);

    DDRB |= _BV(PB5);
 136:	bd 9a       	sbi	0x17, 5	; 23

    // Turn on output compare interrupt
    TIMSK |= _BV(OCIE1D);
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	89 bf       	out	0x39, r24	; 57

    sei();
 13e:	78 94       	sei
}
 140:	08 95       	ret

00000142 <freqgen_enable>:
    TCCR1B |= _BV(CS10);

}

void freqgen_disable() {
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
 142:	8f b5       	in	r24, 0x2f	; 47
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	8f bd       	out	0x2f, r24	; 47
    sei();
}

void freqgen_enable() {
    freqgen_disable();
    TCCR1B |= _BV(CS10);
 148:	8f b5       	in	r24, 0x2f	; 47
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	8f bd       	out	0x2f, r24	; 47

}
 14e:	08 95       	ret

00000150 <freqgen_disable>:

void freqgen_disable() {
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
 150:	8f b5       	in	r24, 0x2f	; 47
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	8f bd       	out	0x2f, r24	; 47
}
 156:	08 95       	ret

00000158 <freqgen_set>:

void freqgen_set(uint16_t top) {
    uint8_t high = (top & 0xFF00) >> 8;
    uint8_t low = (top & 0xFF);

    TC1H = high;
 158:	95 bd       	out	0x25, r25	; 37
    OCR1C = top;
 15a:	8b bd       	out	0x2b, r24	; 43
 15c:	08 95       	ret

0000015e <delay_ms>:
// Defined at compiler invokation

// Fast CPU clock
// #define F_CPU 8000000UL

void delay_ms(int ms) {
 15e:	9c 01       	movw	r18, r24
    // Just a busy loop
    uint16_t top = ms * 250;
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	82 95       	swap	r24
 166:	92 95       	swap	r25
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	98 27       	eor	r25, r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	82 1b       	sub	r24, r18
 172:	93 0b       	sbc	r25, r19
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <__stack+0x25>

    _delay_loop_2(top);
 188:	08 95       	ret

0000018a <display_setup>:

#include <inttypes.h>

void display_setup() {

}
 18a:	08 95       	ret

0000018c <display_set_digit>:

void display_set_digit(uint8_t digit, uint8_t value) {

}
 18c:	08 95       	ret

0000018e <display_set_word>:

void display_set_word(uint8_t word) {

 18e:	08 95       	ret

00000190 <GPIO_setup>:
// DDXN sets data pin direction
// PORTXN is the value of the pin, read or write
// PINXN 

void GPIO_setup() {
    DDRB |= _BV(PIN_PK_CLR); // PB4 is output
 190:	bc 9a       	sbi	0x17, 4	; 23
    PORTB |= _BV(PIN_SW); // PB6 has pull-up
 192:	c6 9a       	sbi	0x18, 6	; 24
}
 194:	08 95       	ret

00000196 <GPIO_sample>:

    // Or on
    // return true;
    
    //return PINB & _BV(PIN_SW);
}
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <GPIO_pk_clr_on>:

void GPIO_pk_clr_on() {
    PORTB |= _BV(PIN_PK_CLR);
 19a:	c4 9a       	sbi	0x18, 4	; 24
}
 19c:	08 95       	ret

0000019e <GPIO_pk_clr_off>:

void GPIO_pk_clr_off() {
    PORTB &= ~_BV(PIN_PK_CLR);
 19e:	c4 98       	cbi	0x18, 4	; 24
}
 1a0:	08 95       	ret

000001a2 <GPIO_pk_clr_pulse>:

void GPIO_pk_clr_pulse() {
    
 1a2:	08 95       	ret

000001a4 <__vector_14>:
#include <avr/interrupt.h>
#include <avr/io.h>

static volatile bool led_on;

ISR(TIMER0_COMPA_vect) {
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
    cli();
 1b0:	f8 94       	cli
    TCNT0H = 0;
 1b2:	14 ba       	out	0x14, r1	; 20
    TCNT0L = 0;
 1b4:	12 be       	out	0x32, r1	; 50

    if (led_on) {
 1b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	81 11       	cpse	r24, r1
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__vector_14+0x34>
        PORTB &= _BV(PIN_BLINK);
    } else {
        PORTB |= _BV(PIN_BLINK);
 1be:	c3 9a       	sbi	0x18, 3	; 24
    }

    led_on = ~led_on;
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    sei();
 1ca:	78 94       	sei
}
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti
    cli();
    TCNT0H = 0;
    TCNT0L = 0;

    if (led_on) {
        PORTB &= _BV(PIN_BLINK);
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	88 70       	andi	r24, 0x08	; 8
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <__vector_14+0x1c>

000001e0 <blink_setup>:
    const uint16_t top = 977;

    uint8_t top_low = top & 0xFF;
    uint8_t top_high = (top >> 8) & 0xFF;

    led_on = true;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

    // Ensure timer is halted
    TCCR0B |= _BV(TSM);
 1e6:	83 b7       	in	r24, 0x33	; 51
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	83 bf       	out	0x33, r24	; 51
    TCCR0B |= _BV(PSR0);
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	83 bf       	out	0x33, r24	; 51

    TCCR0A |= _BV(TCW0);
 1f2:	af 9a       	sbi	0x15, 7	; 21
    OCR0B = top_high;
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	82 bb       	out	0x12, r24	; 18

    OCR0A = top_low;
 1f8:	81 ed       	ldi	r24, 0xD1	; 209
 1fa:	83 bb       	out	0x13, r24	; 19

    // Ensure clock is initially cleared
    // If it isn't then oopsies
    TCNT0H = 0;
 1fc:	14 ba       	out	0x14, r1	; 20
    TCNT0L = 0;
 1fe:	12 be       	out	0x32, r1	; 50

    // Enable interrupt 
    TIMSK |= _BV(OCIE0A);
 200:	89 b7       	in	r24, 0x39	; 57
 202:	80 61       	ori	r24, 0x10	; 16
 204:	89 bf       	out	0x39, r24	; 57
    sei();
 206:	78 94       	sei

    // Prepare clock select
    TCCR0B |= _BV(CS02) | _BV(CS00);
 208:	83 b7       	in	r24, 0x33	; 51
 20a:	85 60       	ori	r24, 0x05	; 5
 20c:	83 bf       	out	0x33, r24	; 51

    // Start clock
    TCCR0B &= ~_BV(TSM);
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	8f 7e       	andi	r24, 0xEF	; 239
 212:	83 bf       	out	0x33, r24	; 51

    DDRB |= _BV(PIN_BLINK);
 214:	bb 9a       	sbi	0x17, 3	; 23
    
    PORTB |= _BV(PIN_BLINK);
 216:	c3 9a       	sbi	0x18, 3	; 24
 218:	08 95       	ret

0000021a <serial_setup>:
#define PIN_SS PA3
#define PIN_UCK PA2

void serial_setup() {
    // SPI
    USICR |= _BV(USIWM0) | _BV(USICS1) | _BV(USICLK);
 21a:	8d b1       	in	r24, 0x0d	; 13
 21c:	8a 61       	ori	r24, 0x1A	; 26
 21e:	8d b9       	out	0x0d, r24	; 13

    // Setup pins
    DDRA |= _BV(PIN_DO) | _BV(PIN_SS) | _BV(PIN_UCK);
 220:	8a b3       	in	r24, 0x1a	; 26
 222:	8e 60       	ori	r24, 0x0E	; 14
 224:	8a bb       	out	0x1a, r24	; 26
    PORTA |= _BV(PIN_SS);
 226:	db 9a       	sbi	0x1b, 3	; 27
}
 228:	08 95       	ret

0000022a <serial_print>:
    // Begin transfer is one is available
    // Just do the whole thing in one go in a slow loop
    // Don't seem to be able to do this asynchronously

    // Pull slave-select down
    PORTA &= ~_BV(PIN_SS);
 22a:	db 98       	cbi	0x1b, 3	; 27

    for (uint8_t i = 0; i < len; i++) {
 22c:	66 23       	and	r22, r22
 22e:	69 f0       	breq	.+26     	; 0x24a <serial_print+0x20>
 230:	fc 01       	movw	r30, r24
 232:	61 50       	subi	r22, 0x01	; 1
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	68 0f       	add	r22, r24
 238:	79 2f       	mov	r23, r25
 23a:	71 1d       	adc	r23, r1
        USIDR = data[i];
 23c:	81 91       	ld	r24, Z+
 23e:	8f b9       	out	0x0f, r24	; 15
        
        // "Release" counter
        USISR |= _BV(USIOIF);
 240:	76 9a       	sbi	0x0e, 6	; 14
        
        // Strobe the clock until the counter overflow flag is set (?)
        while (USISR & _BV(USIOIF) != _BV(USIOIF)) {
 242:	8e b1       	in	r24, 0x0e	; 14
    // Don't seem to be able to do this asynchronously

    // Pull slave-select down
    PORTA &= ~_BV(PIN_SS);

    for (uint8_t i = 0; i < len; i++) {
 244:	6e 17       	cp	r22, r30
 246:	7f 07       	cpc	r23, r31
 248:	c9 f7       	brne	.-14     	; 0x23c <serial_print+0x12>
            // Slow the transfer down a tiny bit
            _delay_loop_1(4);
        }
    }

    PORTA |= _BV(PIN_SS);
 24a:	db 9a       	sbi	0x1b, 3	; 27
}
 24c:	08 95       	ret

0000024e <main>:
    }
}

int main() {

    blink_setup();
 24e:	c8 df       	rcall	.-112    	; 0x1e0 <blink_setup>

}
#endif

void freqgen_test() {
    freqgen_setup();
 250:	6f df       	rcall	.-290    	; 0x130 <freqgen_setup>
    
    freqgen_set(FREQGEN_N);
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	80 df       	rcall	.-256    	; 0x158 <freqgen_set>

    freqgen_enable();
 258:	74 df       	rcall	.-280    	; 0x142 <freqgen_enable>
int main() {

    blink_setup();

    freqgen_test();
    ADC_test();
 25a:	1a df       	rcall	.-460    	; 0x90 <ADC_test>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
