
build/bin/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000021c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fuse         00000003  00820000  00820000  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lock         00000001  00830000  00830000  000002d5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000002f  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000dec  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000097e  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000694  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000021c  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000044a  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000184  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	3f c0       	rjmp	.+126    	; 0x96 <__vector_11>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__vector_14>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e1       	ldi	r30, 0x1C	; 28
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	e0 d0       	rcall	.+448    	; 0x20a <main>
  4a:	e6 c0       	rjmp	.+460    	; 0x218 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <convert>:
// LB_MODE_1 does not enable any lock bits
LOCKBITS = LB_MODE_1;

void convert(uint16_t adc_val) {
    return;
}
  4e:	08 95       	ret

00000050 <ADC_SingleShot>:

#ifdef MODE_SINGLE_SHOT
void ADC_SingleShot() {
    // Main function for the SingleShot mode of operation

    ADC_setup();
  50:	31 d0       	rcall	.+98     	; 0xb4 <ADC_setup>
    freqgen_setup();
  52:	64 d0       	rcall	.+200    	; 0x11c <freqgen_setup>
    GPIO_setup();
  54:	98 d0       	rcall	.+304    	; 0x186 <GPIO_setup>
    display_setup();
  56:	94 d0       	rcall	.+296    	; 0x180 <display_setup>

    freqgen_set(FREQGEN_N);
  58:	80 e1       	ldi	r24, 0x10	; 16
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	71 d0       	rcall	.+226    	; 0x140 <freqgen_set>

    while (1) {
        if (GPIO_sample()) {
  5e:	96 d0       	rcall	.+300    	; 0x18c <GPIO_sample>
  60:	88 23       	and	r24, r24
  62:	e9 f3       	breq	.-6      	; 0x5e <ADC_SingleShot+0xe>
            // Blink isn't so important as to interrupt this
            cli();
  64:	f8 94       	cli

            // Disable peak holding
            GPIO_pk_clr_on();
  66:	97 d0       	rcall	.+302    	; 0x196 <GPIO_pk_clr_on>

            // Start frequency generator
            freqgen_enable();
  68:	63 d0       	rcall	.+198    	; 0x130 <freqgen_enable>

            // Wait approx 1ms for steady state
            delay_ms(1);
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	72 d0       	rcall	.+228    	; 0x154 <delay_ms>

            // Enable peak holding
            GPIO_pk_clr_off();
  70:	94 d0       	rcall	.+296    	; 0x19a <GPIO_pk_clr_off>

            // Wait approx 5ms to stabilise
            delay_ms(5);
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	6e d0       	rcall	.+220    	; 0x154 <delay_ms>

            // Turn off freqgen to decrease noise
            freqgen_disable();
  78:	5f d0       	rcall	.+190    	; 0x138 <freqgen_disable>

            // Here we would enable some low-noise mode

            // Sample ADC
            uint16_t adc_val = ADC_sample();
  7a:	23 d0       	rcall	.+70     	; 0xc2 <ADC_sample>

            // Clear peak holder
            GPIO_pk_clr_on();
  7c:	8c d0       	rcall	.+280    	; 0x196 <GPIO_pk_clr_on>

            // Do some calculation
            convert(adc_val);

            // Output to display
            display_set_word(5);
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	81 d0       	rcall	.+258    	; 0x184 <display_set_word>

            // Blink can keep on going
            sei();
  82:	78 94       	sei

            // Wait a bit to avoid triggering too many times in one press
            delay_ms(300);
  84:	8c e2       	ldi	r24, 0x2C	; 44
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	65 d0       	rcall	.+202    	; 0x154 <delay_ms>
  8a:	e9 cf       	rjmp	.-46     	; 0x5e <ADC_SingleShot+0xe>

0000008c <freqgen_test>:

}
#endif

void freqgen_test() {
    freqgen_setup();
  8c:	47 d0       	rcall	.+142    	; 0x11c <freqgen_setup>
    
    freqgen_set(FREQGEN_N);
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	56 d0       	rcall	.+172    	; 0x140 <freqgen_set>

    freqgen_enable();
  94:	4d c0       	rjmp	.+154    	; 0x130 <freqgen_enable>

00000096 <__vector_11>:

#include <avr/io.h>
#include <avr/sleep.h>
#include <avr/interrupt.h>

ISR(ADC_vect) {
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
    // Turn off sleep mode
    sleep_disable();
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	85 bf       	out	0x35, r24	; 53
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <ADC_setup>:

void ADC_setup() {
    // Enable ADC interrupt
    ADCSRA |= _BV(ADIE);
  b4:	33 9a       	sbi	0x06, 3	; 6

    // Reference set to VCC
    // Set ADC input
    ADMUX |= 0x00; // Single-ended ADC0 (PA0)
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	87 b9       	out	0x07, r24	; 7

    // Set clock prescaling
    // See datasheet section 15.5 (pg 144)
    // Want between 50-200kHz from 1MHz.
    // Division by 8 will achieve this.
    ADCSRA |= _BV(ADPS1) | _BV(ADPS0);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	86 b9       	out	0x06, r24	; 6
}
  c0:	08 95       	ret

000000c2 <ADC_sample>:

uint16_t ADC_sample() {
    // Enable ADC
    ADCSRA |= _BV(ADEN);
  c2:	37 9a       	sbi	0x06, 7	; 6

    // Prepare for sleep
    sleep_enable();
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	85 bf       	out	0x35, r24	; 53
    MCUCR |= _BV(SM0); // ADC noise reduction mode
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	85 bf       	out	0x35, r24	; 53
    sei();
  d0:	78 94       	sei

    // Start conversion
    ADCSRA |= _BV(ADSC);
  d2:	36 9a       	sbi	0x06, 6	; 6

    // Enable sleep mode (will be woken by ADC interrupt)
    sleep_mode();
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	85 bf       	out	0x35, r24	; 53
  da:	88 95       	sleep
  dc:	85 b7       	in	r24, 0x35	; 53
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	85 bf       	out	0x35, r24	; 53

    // Wait for SE to be clear
    // Should happen immediately if all the sleep + wake stuff has worked
    while (1) {
        uint8_t se = (MCUCR & _BV(SE));
        if (se == _BV(SE)) {
  e2:	05 b6       	in	r0, 0x35	; 53
  e4:	05 fe       	sbrs	r0, 5
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_sample+0x20>
        }
    }

    // Extract data
    // ADCL must be read first.
    uint8_t adc_lower = ADCL;
  e8:	24 b1       	in	r18, 0x04	; 4
    uint8_t adc_upper = ADCH;
  ea:	95 b1       	in	r25, 0x05	; 5

    // Data is right justified
    uint16_t adc_result = (adc_upper << 6) + adc_lower;
  ec:	89 2f       	mov	r24, r25
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	00 24       	eor	r0, r0
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	07 94       	ror	r0
  f8:	96 95       	lsr	r25
  fa:	87 95       	ror	r24
  fc:	07 94       	ror	r0
  fe:	98 2f       	mov	r25, r24
 100:	80 2d       	mov	r24, r0
    return adc_result;
}
 102:	82 0f       	add	r24, r18
 104:	91 1d       	adc	r25, r1
 106:	08 95       	ret

00000108 <_timerTopSet>:
 108:	ac 01       	movw	r20, r24
 10a:	44 27       	eor	r20, r20
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	49 30       	cpi	r20, 0x09	; 9
 110:	51 05       	cpc	r21, r1
 112:	08 f4       	brcc	.+2      	; 0x116 <_timerTopSet+0xe>
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	25 bd       	out	0x25, r18	; 37
 118:	8a bd       	out	0x2a, r24	; 42
 11a:	08 95       	ret

0000011c <freqgen_setup>:
    OCR1D = low;
}

void freqgen_setup() {
    // Clear prescaler
    TCCR1B |= _BV(PSR1);
 11c:	8f b5       	in	r24, 0x2f	; 47
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	8f bd       	out	0x2f, r24	; 47

    // Set OCW1D to toggle on compare match mode
    TCCR1C |= _BV(COM1D0);
 122:	87 b5       	in	r24, 0x27	; 39
 124:	84 60       	ori	r24, 0x04	; 4
 126:	87 bd       	out	0x27, r24	; 39

    // Ensure PLL is off 
    // (Using 1MHz system clock as source)
    PLLCSR &= ~(_BV(PCKE) | _BV(PLLE));
 128:	89 b5       	in	r24, 0x29	; 41
 12a:	89 7f       	andi	r24, 0xF9	; 249
 12c:	89 bd       	out	0x29, r24	; 41
}
 12e:	08 95       	ret

00000130 <freqgen_enable>:

void freqgen_enable() {
    TCCR1B |= _BV(CS10);
 130:	8f b5       	in	r24, 0x2f	; 47
 132:	81 60       	ori	r24, 0x01	; 1
 134:	8f bd       	out	0x2f, r24	; 47
}
 136:	08 95       	ret

00000138 <freqgen_disable>:

void freqgen_disable() {
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
 138:	8f b5       	in	r24, 0x2f	; 47
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	8f bd       	out	0x2f, r24	; 47
}
 13e:	08 95       	ret

00000140 <freqgen_set>:



void _timerTopSet(uint16_t top) {
    // Split into upper and lower
    uint8_t high = (top & 0xFF00) > 8;
 140:	ac 01       	movw	r20, r24
 142:	44 27       	eor	r20, r20
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	49 30       	cpi	r20, 0x09	; 9
 148:	51 05       	cpc	r21, r1
 14a:	08 f4       	brcc	.+2      	; 0x14e <freqgen_set+0xe>
 14c:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t low = (top & 0xFF);

    TC1H = high;
 14e:	25 bd       	out	0x25, r18	; 37
    OCR1D = low;
 150:	8a bd       	out	0x2a, r24	; 42
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
}

void freqgen_set(uint16_t top) {
    _timerTopSet(top);
 152:	08 95       	ret

00000154 <delay_ms>:
// Defined at compiler invokation

// Fast CPU clock
// #define F_CPU 8000000UL

void delay_ms(int ms) {
 154:	9c 01       	movw	r18, r24
    // Just a busy loop
    uint16_t top = ms * 250;
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	82 95       	swap	r24
 15c:	92 95       	swap	r25
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	98 27       	eor	r25, r24
 166:	82 1b       	sub	r24, r18
 168:	93 0b       	sbc	r25, r19
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <__stack+0x1b>

    _delay_loop_2(top);
 17e:	08 95       	ret

00000180 <display_setup>:

#include <inttypes.h>

void display_setup() {

}
 180:	08 95       	ret

00000182 <display_set_digit>:

void display_set_digit(uint8_t digit, uint8_t value) {

}
 182:	08 95       	ret

00000184 <display_set_word>:

void display_set_word(uint8_t word) {

 184:	08 95       	ret

00000186 <GPIO_setup>:
// DDXN sets data pin direction
// PORTXN is the value of the pin, read or write
// PINXN 

void GPIO_setup() {
    DDRB |= _BV(PIN_PK_CLR); // PB4 is output
 186:	bc 9a       	sbi	0x17, 4	; 23
    PORTB |= _BV(PIN_SW); // PB6 has pull-up
 188:	c6 9a       	sbi	0x18, 6	; 24
}
 18a:	08 95       	ret

0000018c <GPIO_sample>:

bool GPIO_sample() {
    return PINB & _BV(PIN_SW);
 18c:	86 b3       	in	r24, 0x16	; 22
}
 18e:	86 fb       	bst	r24, 6
 190:	88 27       	eor	r24, r24
 192:	80 f9       	bld	r24, 0
 194:	08 95       	ret

00000196 <GPIO_pk_clr_on>:

void GPIO_pk_clr_on() {
    PORTB |= _BV(PIN_PK_CLR);
 196:	c4 9a       	sbi	0x18, 4	; 24
}
 198:	08 95       	ret

0000019a <GPIO_pk_clr_off>:

void GPIO_pk_clr_off() {
    PORTB &= ~_BV(PIN_PK_CLR);
 19a:	c4 98       	cbi	0x18, 4	; 24
}
 19c:	08 95       	ret

0000019e <GPIO_pk_clr_pulse>:

void GPIO_pk_clr_pulse() {
    
 19e:	08 95       	ret

000001a0 <__vector_14>:
#include <avr/interrupt.h>
#include <avr/io.h>

static bool led_on = true;

ISR(TIMER0_COMPA_vect) {
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
    cli();
 1ac:	f8 94       	cli
    TCNT0L = 0;
 1ae:	12 be       	out	0x32, r1	; 50
    TCNT0H = 0;
 1b0:	14 ba       	out	0x14, r1	; 20

    if (led_on) {
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b6:	81 11       	cpse	r24, r1
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <__vector_14+0x30>
        PORTB &= _BV(PIN_BLINK);
    } else {
        PORTB |= _BV(PIN_BLINK);
 1ba:	c3 9a       	sbi	0x18, 3	; 24
    }

    led_on = ~led_on;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    sei();
 1c2:	78 94       	sei
}
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti
    cli();
    TCNT0L = 0;
    TCNT0H = 0;

    if (led_on) {
        PORTB &= _BV(PIN_BLINK);
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	88 70       	andi	r24, 0x08	; 8
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	f2 cf       	rjmp	.-28     	; 0x1bc <__vector_14+0x1c>

000001d8 <blink_setup>:

    uint8_t top_low = top & 0xFF;
    uint8_t top_high = (top >> 8) & 0xFF;

    // Ensure timer is halted
    TCCR0B |= _BV(TSM);
 1d8:	83 b7       	in	r24, 0x33	; 51
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	83 bf       	out	0x33, r24	; 51
    TCCR0B |= _BV(PSR0);
 1de:	83 b7       	in	r24, 0x33	; 51
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	83 bf       	out	0x33, r24	; 51

    TCCR0A |= _BV(TCW0);
 1e4:	af 9a       	sbi	0x15, 7	; 21
    OCR0B = top_high;
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	82 bb       	out	0x12, r24	; 18

    OCR0A = top_low;
 1ea:	81 ed       	ldi	r24, 0xD1	; 209
 1ec:	83 bb       	out	0x13, r24	; 19

    // Ensure clock is initially cleared
    // If it isn't then oopsies
    TCNT0L = 0;
 1ee:	12 be       	out	0x32, r1	; 50
    TCNT0H = 0;
 1f0:	14 ba       	out	0x14, r1	; 20

    // Enable interrupt 
    TIMSK |= _BV(OCIE0A);
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	89 bf       	out	0x39, r24	; 57

    // Prepare clock select
    TCCR0B |= _BV(CS02) | _BV(CS00);
 1f8:	83 b7       	in	r24, 0x33	; 51
 1fa:	85 60       	ori	r24, 0x05	; 5
 1fc:	83 bf       	out	0x33, r24	; 51

    // Start clock
    TCCR0B &= ~_BV(TSM);
 1fe:	83 b7       	in	r24, 0x33	; 51
 200:	8f 7e       	andi	r24, 0xEF	; 239
 202:	83 bf       	out	0x33, r24	; 51

    DDRB |= _BV(PIN_BLINK);
 204:	bb 9a       	sbi	0x17, 3	; 23
    
    PORTB |= _BV(PIN_BLINK);
 206:	c3 9a       	sbi	0x18, 3	; 24
 208:	08 95       	ret

0000020a <main>:
}

int main() {

    blink_setup();
 20a:	e6 df       	rcall	.-52     	; 0x1d8 <blink_setup>

}
#endif

void freqgen_test() {
    freqgen_setup();
 20c:	87 df       	rcall	.-242    	; 0x11c <freqgen_setup>
    
    freqgen_set(FREQGEN_N);
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	96 df       	rcall	.-212    	; 0x140 <freqgen_set>

    freqgen_enable();
 214:	8d df       	rcall	.-230    	; 0x130 <freqgen_enable>
    blink_setup();

    freqgen_test();

#ifdef MODE_SINGLE_SHOT
    ADC_SingleShot();
 216:	1c df       	rcall	.-456    	; 0x50 <ADC_SingleShot>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
