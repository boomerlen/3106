
build/bin/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000114  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fuse         00000003  00820000  00820000  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lock         00000001  00830000  00830000  000001cb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000002f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008aa  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000715  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f8  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e4  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000327  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000131  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	10 c0       	rjmp	.+32     	; 0x38 <__vector_11>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__vector_17>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	49 d0       	rcall	.+146    	; 0xc6 <main>
  34:	6d c0       	rjmp	.+218    	; 0x110 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_11>:

#include <avr/io.h>
#include <avr/sleep.h>
#include <avr/interrupt.h>

ISR(ADC_vect) {
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
    // Turn off sleep mode
    //sleep_disable();
}
  42:	0f 90       	pop	r0
  44:	0f be       	out	0x3f, r0	; 63
  46:	0f 90       	pop	r0
  48:	1f 90       	pop	r1
  4a:	18 95       	reti

0000004c <ADC_setup>:

    // Reference set to VCC
    // Set ADC input
    //ADMUX |= 0x00; // Single-ended ADC0 (PA0)
    
    DIDR0 |= _BV(ADC0D);
  4c:	08 9a       	sbi	0x01, 0	; 1

    // Set clock prescaling
    // See datasheet section 15.5 (pg 144)
    // Want between 50-200kHz from 1MHz.
    // Division by 8 will achieve this.
    ADCSRA |= _BV(ADPS1) | _BV(ADPS0);
  4e:	86 b1       	in	r24, 0x06	; 6
  50:	83 60       	ori	r24, 0x03	; 3
  52:	86 b9       	out	0x06, r24	; 6
}
  54:	08 95       	ret

00000056 <ADC_sample>:

uint16_t ADC_sample() {
    // Enable ADC
    ADCSRA |= _BV(ADEN);
  56:	37 9a       	sbi	0x06, 7	; 6
    //sleep_enable();
    //MCUCR |= _BV(SM0); // ADC noise reduction mode
    //sei();

    // Start conversion
    ADCSRA |= _BV(ADSC);
  58:	36 9a       	sbi	0x06, 6	; 6

    // Wait for SE to be clear
    // Should happen immediately if all the sleep + wake stuff has worked
    while (1) {
        uint8_t se = (ADCSRA & _BV(ADSC));
        if (se == _BV(ADSC)) {
  5a:	36 9b       	sbis	0x06, 6	; 6
  5c:	fe cf       	rjmp	.-4      	; 0x5a <ADC_sample+0x4>
        }
    }

    // Extract data
    // ADCL must be read first.
    uint8_t adc_lower = ADCL;
  5e:	24 b1       	in	r18, 0x04	; 4
    uint8_t adc_upper = ADCH;
  60:	95 b1       	in	r25, 0x05	; 5

    // Data is right justified
    uint16_t adc_result = (adc_upper << 6) + adc_lower;
  62:	89 2f       	mov	r24, r25
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	00 24       	eor	r0, r0
  68:	96 95       	lsr	r25
  6a:	87 95       	ror	r24
  6c:	07 94       	ror	r0
  6e:	96 95       	lsr	r25
  70:	87 95       	ror	r24
  72:	07 94       	ror	r0
  74:	98 2f       	mov	r25, r24
  76:	80 2d       	mov	r24, r0

    
    return adc_result;
}
  78:	82 0f       	add	r24, r18
  7a:	91 1d       	adc	r25, r1
  7c:	08 95       	ret

0000007e <__vector_17>:

// Decisions:
// 1. Output is going into OC1D
// 2. Want to use Normal Mode and "toggle Compare Output Mode"

ISR(TIMER1_COMPD_vect) {
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1

}
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <freqgen_setup>:
void freqgen_setup() {
    // Clear prescaler
    //TCCR1B |= _BV(PSR1);

    // Set OCW1D to toggle on compare match mode
    TCCR1C |= _BV(COM1D0);
  92:	87 b5       	in	r24, 0x27	; 39
  94:	84 60       	ori	r24, 0x04	; 4
  96:	87 bd       	out	0x27, r24	; 39

    // Ensure PLL is off 
    // (Using 1MHz system clock as source)
    PLLCSR |= _BV(PCKE) | _BV(PLLE);
  98:	89 b5       	in	r24, 0x29	; 41
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	89 bd       	out	0x29, r24	; 41

    DDRB |= _BV(PB5);
  9e:	bd 9a       	sbi	0x17, 5	; 23

    // Turn on output compare interrupt
    TIMSK |= _BV(OCIE1D);
  a0:	89 b7       	in	r24, 0x39	; 57
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	89 bf       	out	0x39, r24	; 57

    sei();
  a6:	78 94       	sei
}
  a8:	08 95       	ret

000000aa <freqgen_enable>:
    TCCR1B |= _BV(CS10);

}

void freqgen_disable() {
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
  aa:	8f b5       	in	r24, 0x2f	; 47
  ac:	80 7f       	andi	r24, 0xF0	; 240
  ae:	8f bd       	out	0x2f, r24	; 47
    sei();
}

void freqgen_enable() {
    freqgen_disable();
    TCCR1B |= _BV(CS10);
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8f bd       	out	0x2f, r24	; 47

}
  b6:	08 95       	ret

000000b8 <freqgen_disable>:

void freqgen_disable() {
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
  b8:	8f b5       	in	r24, 0x2f	; 47
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	8f bd       	out	0x2f, r24	; 47
}
  be:	08 95       	ret

000000c0 <freqgen_set>:

void freqgen_set(uint16_t top) {
    uint8_t high = (top & 0xFF00) >> 8;
    uint8_t low = (top & 0xFF);

    TC1H = high;
  c0:	95 bd       	out	0x25, r25	; 37
    OCR1C = top;
  c2:	8b bd       	out	0x2b, r24	; 43
  c4:	08 95       	ret

000000c6 <main>:
// Freqgen N
#define FREQGEN_N 700

int main() {
    // On LED
    DDRB |= _BV(PB3);
  c6:	bb 9a       	sbi	0x17, 3	; 23
    PORTB |= _BV(PB3);
  c8:	c3 9a       	sbi	0x18, 3	; 24

    // Start frequency generator
    freqgen_setup();
  ca:	e3 df       	rcall	.-58     	; 0x92 <freqgen_setup>
    freqgen_set(FREQGEN_N);
  cc:	8c eb       	ldi	r24, 0xBC	; 188
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	f7 df       	rcall	.-18     	; 0xc0 <freqgen_set>
    freqgen_enable();
  d2:	eb df       	rcall	.-42     	; 0xaa <freqgen_enable>

    ADC_setup();
  d4:	bb df       	rcall	.-138    	; 0x4c <ADC_setup>

    // Calibrate ADC
    uint16_t no_metal = ADC_sample();
  d6:	bf df       	rcall	.-130    	; 0x56 <ADC_sample>

    // Output thresholds
    // Tune these
    uint16_t threshold[2] = {
        no_metal + 5, 
  d8:	ec 01       	movw	r28, r24
  da:	25 96       	adiw	r28, 0x05	; 5
        no_metal + 15
  dc:	8c 01       	movw	r16, r24
  de:	01 5f       	subi	r16, 0xF1	; 241
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
    };

    // Light setup
    DDRA |= _BV(PA4);
  e2:	d4 9a       	sbi	0x1a, 4	; 26
    DDRA |= _BV(PA5);
  e4:	d5 9a       	sbi	0x1a, 5	; 26

    // Compare
    while (1) {
        uint16_t adc = ADC_sample();
  e6:	b7 df       	rcall	.-146    	; 0x56 <ADC_sample>

        if (adc < threshold[0]) {
  e8:	8c 17       	cp	r24, r28
  ea:	9d 07       	cpc	r25, r29
  ec:	38 f4       	brcc	.+14     	; 0xfc <main+0x36>
            // Both off
            PORTA &= ~(_BV(PA4) | _BV(PA5));
  ee:	8b b3       	in	r24, 0x1b	; 27
  f0:	8f 7c       	andi	r24, 0xCF	; 207
  f2:	8b bb       	out	0x1b, r24	; 27
    DDRA |= _BV(PA4);
    DDRA |= _BV(PA5);

    // Compare
    while (1) {
        uint16_t adc = ADC_sample();
  f4:	b0 df       	rcall	.-160    	; 0x56 <ADC_sample>

        if (adc < threshold[0]) {
  f6:	8c 17       	cp	r24, r28
  f8:	9d 07       	cpc	r25, r29
  fa:	c8 f3       	brcs	.-14     	; 0xee <main+0x28>
            // Both off
            PORTA &= ~(_BV(PA4) | _BV(PA5));
        } else if (adc < threshold[1]) {
  fc:	80 17       	cp	r24, r16
  fe:	91 07       	cpc	r25, r17
 100:	18 f4       	brcc	.+6      	; 0x108 <__DATA_REGION_LENGTH__+0x8>
            // One on
            PORTA &= ~(_BV(PA5));
 102:	dd 98       	cbi	0x1b, 5	; 27
            PORTA |= _BV(PA4);
 104:	dc 9a       	sbi	0x1b, 4	; 27
 106:	ef cf       	rjmp	.-34     	; 0xe6 <main+0x20>
        } else {
            // Both on
            PORTA |= _BV(PA4) | _BV(PA5);
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	80 63       	ori	r24, 0x30	; 48
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	eb cf       	rjmp	.-42     	; 0xe6 <main+0x20>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
