
build/bin/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000200  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ea  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000268  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	bb c0       	rjmp	.+374    	; 0x1ac <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
// 

#include "include/ADC.h"
#include "include/FreqGen.h"

int main() {
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62
    freqgen_setup();
  40:	6a d0       	rcall	.+212    	; 0x116 <freqgen_setup>

    freqgen_set(100);
  42:	84 e6       	ldi	r24, 0x64	; 100
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	9a d0       	rcall	.+308    	; 0x17c <freqgen_set>

    freqgen_enable();
  48:	77 d0       	rcall	.+238    	; 0x138 <freqgen_enable>

    ADC_setup();
  4a:	05 d0       	rcall	.+10     	; 0x56 <ADC_setup>
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	08 95       	ret

00000056 <ADC_setup>:
//
// HS 30/3/23

#include "../include/ADC.h"

void ADC_setup() {
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62

}
  5e:	00 00       	nop
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	08 95       	ret

00000066 <ADC_sample>:

uint16_t ADC_sample() {
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	cd b7       	in	r28, 0x3d	; 61
  6c:	de b7       	in	r29, 0x3e	; 62
    return 0;
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	08 95       	ret

00000078 <_timerTopSet>:

#include <inttypes.h>

#include <avr/io.h>

void _timerTopSet(uint16_t top) {
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	00 d0       	rcall	.+0      	; 0x7e <_timerTopSet+0x6>
  7e:	00 d0       	rcall	.+0      	; 0x80 <_timerTopSet+0x8>
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	9c 83       	std	Y+4, r25	; 0x04
  86:	8b 83       	std	Y+3, r24	; 0x03
    // Split into upper and lower
    uint8_t high = (top & 0xFF00) > 8;
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	9c 81       	ldd	r25, Y+4	; 0x04
  8c:	88 27       	eor	r24, r24
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	09 97       	sbiw	r24, 0x09	; 9
  92:	08 f4       	brcc	.+2      	; 0x96 <_timerTopSet+0x1e>
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	29 83       	std	Y+1, r18	; 0x01
    uint8_t low = (top & 0xFF);
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	8a 83       	std	Y+2, r24	; 0x02

    TC1H = high;
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
    OCR1A = low;
  a6:	8d e4       	ldi	r24, 0x4D	; 77
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2a 81       	ldd	r18, Y+2	; 0x02
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	00 00       	nop
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <_timerFastMode>:

void _timerFastMode() {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
    PLLCSR |= _BV(PLLE);
  c8:	89 e4       	ldi	r24, 0x49	; 73
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	20 81       	ld	r18, Z
  d0:	89 e4       	ldi	r24, 0x49	; 73
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	22 60       	ori	r18, 0x02	; 2
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
    PLLCSR |= _BV(PCKE);
  da:	89 e4       	ldi	r24, 0x49	; 73
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	20 81       	ld	r18, Z
  e2:	89 e4       	ldi	r24, 0x49	; 73
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	24 60       	ori	r18, 0x04	; 4
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
}
  ec:	00 00       	nop
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <_timerSlowMode>:

void _timerSlowMode() {
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
    PLLCSR &= ~_BV(PCKE);
  fc:	89 e4       	ldi	r24, 0x49	; 73
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	20 81       	ld	r18, Z
 104:	89 e4       	ldi	r24, 0x49	; 73
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2b 7f       	andi	r18, 0xFB	; 251
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
}
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <freqgen_setup>:

void freqgen_setup() {
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
    TCCR1A |= _BV(COM1A0);
 11e:	80 e5       	ldi	r24, 0x50	; 80
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	20 81       	ld	r18, Z
 126:	80 e5       	ldi	r24, 0x50	; 80
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 64       	ori	r18, 0x40	; 64
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
}
 130:	00 00       	nop
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <freqgen_enable>:

void freqgen_enable() {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
    TCCR1B |= _BV(CS10);
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	20 81       	ld	r18, Z
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 60       	ori	r18, 0x01	; 1
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
}
 152:	00 00       	nop
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <freqgen_disable>:

void freqgen_disable() {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= ~(_BV(CS13) | _BV(CS12) | _BV(CS11) | _BV(CS10));
 162:	8f e4       	ldi	r24, 0x4F	; 79
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	20 81       	ld	r18, Z
 16a:	8f e4       	ldi	r24, 0x4F	; 79
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	20 7f       	andi	r18, 0xF0	; 240
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <freqgen_set>:

void freqgen_set(int f_khz) {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <freqgen_set+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <freqgen_set+0x8>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
    // f is in KHz
    
    // Do some conversion
    uint16_t n = f_khz & 0xFFFF;
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01

    _timerFastMode();
 194:	95 df       	rcall	.-214    	; 0xc0 <_timerFastMode>
    _timerTopSet(n);
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	6e df       	rcall	.-292    	; 0x78 <_timerTopSet>
 19c:	00 00       	nop
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
